package co.woofy.upload;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import co.woofy.upload.Logs;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOGS.
*/
public class LogsDao extends AbstractDao<Logs, Long> {

    public static final String TABLENAME = "LOGS";

    /**
     * Properties of entity Logs.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Fecha = new Property(1, String.class, "fecha", false, "FECHA");
        public final static Property Hora = new Property(2, String.class, "hora", false, "HORA");
        public final static Property TimeStamp = new Property(3, java.util.Date.class, "timeStamp", false, "TIME_STAMP");
        public final static Property Longitud = new Property(4, Float.class, "longitud", false, "LONGITUD");
        public final static Property Latitud = new Property(5, Float.class, "latitud", false, "LATITUD");
        public final static Property Descripcion = new Property(6, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property IdSesion = new Property(7, long.class, "idSesion", false, "ID_SESION");
    };

    private DaoSession daoSession;

    private Query<Logs> sesion_LogsQuery;

    public LogsDao(DaoConfig config) {
        super(config);
    }
    
    public LogsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOGS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FECHA' TEXT," + // 1: fecha
                "'HORA' TEXT," + // 2: hora
                "'TIME_STAMP' INTEGER NOT NULL ," + // 3: timeStamp
                "'LONGITUD' REAL," + // 4: longitud
                "'LATITUD' REAL," + // 5: latitud
                "'DESCRIPCION' TEXT," + // 6: descripcion
                "'ID_SESION' INTEGER NOT NULL );"); // 7: idSesion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOGS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Logs entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindString(2, fecha);
        }
 
        String hora = entity.getHora();
        if (hora != null) {
            stmt.bindString(3, hora);
        }
        stmt.bindLong(4, entity.getTimeStamp().getTime());
 
        Float longitud = entity.getLongitud();
        if (longitud != null) {
            stmt.bindDouble(5, longitud);
        }
 
        Float latitud = entity.getLatitud();
        if (latitud != null) {
            stmt.bindDouble(6, latitud);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(7, descripcion);
        }
        stmt.bindLong(8, entity.getIdSesion());
    }

    @Override
    protected void attachEntity(Logs entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Logs readEntity(Cursor cursor, int offset) {
        Logs entity = new Logs( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fecha
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hora
            new java.util.Date(cursor.getLong(offset + 3)), // timeStamp
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // longitud
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // latitud
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // descripcion
            cursor.getLong(offset + 7) // idSesion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Logs entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFecha(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHora(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTimeStamp(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setLongitud(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setLatitud(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setDescripcion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIdSesion(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Logs entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Logs entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "logs" to-many relationship of Sesion. */
    public List<Logs> _querySesion_Logs(long idSesion) {
        synchronized (this) {
            if (sesion_LogsQuery == null) {
                QueryBuilder<Logs> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdSesion.eq(null));
                queryBuilder.orderRaw("TIME_STAMP ASC");
                sesion_LogsQuery = queryBuilder.build();
            }
        }
        Query<Logs> query = sesion_LogsQuery.forCurrentThread();
        query.setParameter(0, idSesion);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSesionDao().getAllColumns());
            builder.append(" FROM LOGS T");
            builder.append(" LEFT JOIN SESION T0 ON T.'ID_SESION'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Logs loadCurrentDeep(Cursor cursor, boolean lock) {
        Logs entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Sesion sesion = loadCurrentOther(daoSession.getSesionDao(), cursor, offset);
         if(sesion != null) {
            entity.setSesion(sesion);
        }

        return entity;    
    }

    public Logs loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Logs> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Logs> list = new ArrayList<Logs>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Logs> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Logs> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
