package co.woofy.upload;

import co.woofy.upload.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ESPECIAS.
 */
public class Especias {

    private Long id;
    private String nombre;
    private long EspeciasID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EspeciasDao myDao;

    private VehiculoData vehiculoData;
    private Long vehiculoData__resolvedKey;


    public Especias() {
    }

    public Especias(Long id) {
        this.id = id;
    }

    public Especias(Long id, String nombre, long EspeciasID) {
        this.id = id;
        this.nombre = nombre;
        this.EspeciasID = EspeciasID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEspeciasDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public long getEspeciasID() {
        return EspeciasID;
    }

    public void setEspeciasID(long EspeciasID) {
        this.EspeciasID = EspeciasID;
    }

    /** To-one relationship, resolved on first access. */
    public VehiculoData getVehiculoData() {
        long __key = this.EspeciasID;
        if (vehiculoData__resolvedKey == null || !vehiculoData__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VehiculoDataDao targetDao = daoSession.getVehiculoDataDao();
            VehiculoData vehiculoDataNew = targetDao.load(__key);
            synchronized (this) {
                vehiculoData = vehiculoDataNew;
            	vehiculoData__resolvedKey = __key;
            }
        }
        return vehiculoData;
    }

    public void setVehiculoData(VehiculoData vehiculoData) {
        if (vehiculoData == null) {
            throw new DaoException("To-one property 'EspeciasID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.vehiculoData = vehiculoData;
            EspeciasID = vehiculoData.getId();
            vehiculoData__resolvedKey = EspeciasID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
