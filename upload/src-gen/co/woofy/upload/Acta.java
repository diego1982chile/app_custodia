package co.woofy.upload;

import co.woofy.upload.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ACTA.
 */
public class Acta {

    private Long id;
    private long FirmaID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ActaDao myDao;

    private Firma firma;
    private Long firma__resolvedKey;


    public Acta() {
    }

    public Acta(Long id) {
        this.id = id;
    }

    public Acta(Long id, long FirmaID) {
        this.id = id;
        this.FirmaID = FirmaID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getActaDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getFirmaID() {
        return FirmaID;
    }

    public void setFirmaID(long FirmaID) {
        this.FirmaID = FirmaID;
    }

    /** To-one relationship, resolved on first access. */
    public Firma getFirma() {
        long __key = this.FirmaID;
        if (firma__resolvedKey == null || !firma__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FirmaDao targetDao = daoSession.getFirmaDao();
            Firma firmaNew = targetDao.load(__key);
            synchronized (this) {
                firma = firmaNew;
            	firma__resolvedKey = __key;
            }
        }
        return firma;
    }

    public void setFirma(Firma firma) {
        if (firma == null) {
            throw new DaoException("To-one property 'FirmaID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.firma = firma;
            FirmaID = firma.getId();
            firma__resolvedKey = FirmaID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
