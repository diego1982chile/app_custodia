package test3.ncxchile.cl.greenDAO;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import test3.ncxchile.cl.greenDAO.Persona;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table persona.
*/
public class PersonaDao extends AbstractDao<Persona, Long> {

    public static final String TABLENAME = "persona";

    /**
     * Properties of entity Persona.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nombre = new Property(1, String.class, "nombre", false, "NOMBRE");
        public final static Property Rut = new Property(2, String.class, "rut", false, "RUT");
        public final static Property ApellidoPaterno = new Property(3, String.class, "apellidoPaterno", false, "APELLIDO_PATERNO");
        public final static Property ApellidoMaterno = new Property(4, String.class, "apellidoMaterno", false, "APELLIDO_MATERNO");
        public final static Property Usuario = new Property(5, String.class, "usuario", false, "USUARIO");
        public final static Property CorreosID = new Property(6, long.class, "correosID", false, "CORREOS_ID");
        public final static Property TelefonosID = new Property(7, long.class, "telefonosID", false, "TELEFONOS_ID");
        public final static Property Direccion2ID = new Property(8, long.class, "direccion2ID", false, "DIRECCION2_ID");
    };

    private DaoSession daoSession;


    public PersonaDao(DaoConfig config) {
        super(config);
    }
    
    public PersonaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'persona' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NOMBRE' TEXT," + // 1: nombre
                "'RUT' TEXT," + // 2: rut
                "'APELLIDO_PATERNO' TEXT," + // 3: apellidoPaterno
                "'APELLIDO_MATERNO' TEXT," + // 4: apellidoMaterno
                "'USUARIO' TEXT," + // 5: usuario
                "'CORREOS_ID' INTEGER NOT NULL ," + // 6: correosID
                "'TELEFONOS_ID' INTEGER NOT NULL ," + // 7: telefonosID
                "'DIRECCION2_ID' INTEGER NOT NULL );"); // 8: direccion2ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'persona'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Persona entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(2, nombre);
        }
 
        String rut = entity.getRut();
        if (rut != null) {
            stmt.bindString(3, rut);
        }
 
        String apellidoPaterno = entity.getApellidoPaterno();
        if (apellidoPaterno != null) {
            stmt.bindString(4, apellidoPaterno);
        }
 
        String apellidoMaterno = entity.getApellidoMaterno();
        if (apellidoMaterno != null) {
            stmt.bindString(5, apellidoMaterno);
        }
 
        String usuario = entity.getUsuario();
        if (usuario != null) {
            stmt.bindString(6, usuario);
        }
        stmt.bindLong(7, entity.getCorreosID());
        stmt.bindLong(8, entity.getTelefonosID());
        stmt.bindLong(9, entity.getDireccion2ID());
    }

    @Override
    protected void attachEntity(Persona entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Persona readEntity(Cursor cursor, int offset) {
        Persona entity = new Persona( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nombre
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rut
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // apellidoPaterno
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // apellidoMaterno
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // usuario
            cursor.getLong(offset + 6), // correosID
            cursor.getLong(offset + 7), // telefonosID
            cursor.getLong(offset + 8) // direccion2ID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Persona entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRut(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setApellidoPaterno(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setApellidoMaterno(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUsuario(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCorreosID(cursor.getLong(offset + 6));
        entity.setTelefonosID(cursor.getLong(offset + 7));
        entity.setDireccion2ID(cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Persona entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Persona entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDireccionDao().getAllColumns());
            builder.append(" FROM persona T");
            builder.append(" LEFT JOIN direccion T0 ON T.'DIRECCION2_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Persona loadCurrentDeep(Cursor cursor, boolean lock) {
        Persona entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Direccion direccion = loadCurrentOther(daoSession.getDireccionDao(), cursor, offset);
         if(direccion != null) {
            entity.setDireccion(direccion);
        }

        return entity;    
    }

    public Persona loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Persona> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Persona> list = new ArrayList<Persona>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Persona> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Persona> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
