package test3.ncxchile.cl.greenDAO;

import java.util.List;
import test3.ncxchile.cl.greenDAO.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table vehiculoData.
 */
public class VehiculoData {

    private Long id;
    private long vehiculoID;
    private long especiasID;
    private long clienteConductorID;
    private long clientePropietarioID;
    private long parqueaderoID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient VehiculoDataDao myDao;

    private Vehiculo vehiculo;
    private Long vehiculo__resolvedKey;

    private Cliente clienteConductor;
    private Long clienteConductor__resolvedKey;

    private Parqueadero parqueadero;
    private Long parqueadero__resolvedKey;

    private List<Especias> especiasList;
    private List<Cliente> clientePropietario;

    public VehiculoData() {
    }

    public VehiculoData(Long id) {
        this.id = id;
    }

    public VehiculoData(Long id, long vehiculoID, long especiasID, long clienteConductorID, long clientePropietarioID, long parqueaderoID) {
        this.id = id;
        this.vehiculoID = vehiculoID;
        this.especiasID = especiasID;
        this.clienteConductorID = clienteConductorID;
        this.clientePropietarioID = clientePropietarioID;
        this.parqueaderoID = parqueaderoID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getVehiculoDataDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getVehiculoID() {
        return vehiculoID;
    }

    public void setVehiculoID(long vehiculoID) {
        this.vehiculoID = vehiculoID;
    }

    public long getEspeciasID() {
        return especiasID;
    }

    public void setEspeciasID(long especiasID) {
        this.especiasID = especiasID;
    }

    public long getClienteConductorID() {
        return clienteConductorID;
    }

    public void setClienteConductorID(long clienteConductorID) {
        this.clienteConductorID = clienteConductorID;
    }

    public long getClientePropietarioID() {
        return clientePropietarioID;
    }

    public void setClientePropietarioID(long clientePropietarioID) {
        this.clientePropietarioID = clientePropietarioID;
    }

    public long getParqueaderoID() {
        return parqueaderoID;
    }

    public void setParqueaderoID(long parqueaderoID) {
        this.parqueaderoID = parqueaderoID;
    }

    /** To-one relationship, resolved on first access. */
    public Vehiculo getVehiculo() {
        long __key = this.vehiculoID;
        if (vehiculo__resolvedKey == null || !vehiculo__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VehiculoDao targetDao = daoSession.getVehiculoDao();
            Vehiculo vehiculoNew = targetDao.load(__key);
            synchronized (this) {
                vehiculo = vehiculoNew;
            	vehiculo__resolvedKey = __key;
            }
        }
        return vehiculo;
    }

    public void setVehiculo(Vehiculo vehiculo) {
        if (vehiculo == null) {
            throw new DaoException("To-one property 'vehiculoID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.vehiculo = vehiculo;
            vehiculoID = vehiculo.getId();
            vehiculo__resolvedKey = vehiculoID;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Cliente getClienteConductor() {
        long __key = this.clienteConductorID;
        if (clienteConductor__resolvedKey == null || !clienteConductor__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ClienteDao targetDao = daoSession.getClienteDao();
            Cliente clienteConductorNew = targetDao.load(__key);
            synchronized (this) {
                clienteConductor = clienteConductorNew;
            	clienteConductor__resolvedKey = __key;
            }
        }
        return clienteConductor;
    }

    public void setClienteConductor(Cliente clienteConductor) {
        if (clienteConductor == null) {
            throw new DaoException("To-one property 'clienteConductorID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.clienteConductor = clienteConductor;
            clienteConductorID = clienteConductor.getId();
            clienteConductor__resolvedKey = clienteConductorID;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Parqueadero getParqueadero() {
        long __key = this.parqueaderoID;
        if (parqueadero__resolvedKey == null || !parqueadero__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ParqueaderoDao targetDao = daoSession.getParqueaderoDao();
            Parqueadero parqueaderoNew = targetDao.load(__key);
            synchronized (this) {
                parqueadero = parqueaderoNew;
            	parqueadero__resolvedKey = __key;
            }
        }
        return parqueadero;
    }

    public void setParqueadero(Parqueadero parqueadero) {
        if (parqueadero == null) {
            throw new DaoException("To-one property 'parqueaderoID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.parqueadero = parqueadero;
            parqueaderoID = parqueadero.getId();
            parqueadero__resolvedKey = parqueaderoID;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Especias> getEspeciasList() {
        if (especiasList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EspeciasDao targetDao = daoSession.getEspeciasDao();
            List<Especias> especiasListNew = targetDao._queryVehiculoData_EspeciasList(id);
            synchronized (this) {
                if(especiasList == null) {
                    especiasList = especiasListNew;
                }
            }
        }
        return especiasList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEspeciasList() {
        especiasList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Cliente> getClientePropietario() {
        if (clientePropietario == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ClienteDao targetDao = daoSession.getClienteDao();
            List<Cliente> clientePropietarioNew = targetDao._queryVehiculoData_ClientePropietario(id);
            synchronized (this) {
                if(clientePropietario == null) {
                    clientePropietario = clientePropietarioNew;
                }
            }
        }
        return clientePropietario;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetClientePropietario() {
        clientePropietario = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
