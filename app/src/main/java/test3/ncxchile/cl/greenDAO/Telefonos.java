package test3.ncxchile.cl.greenDAO;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TELEFONOS.
 */
public class Telefonos {

    private Long id;
    private String Email;
    private long telefonosID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TelefonosDao myDao;

    private Persona persona;
    private Long persona__resolvedKey;


    public Telefonos() {
    }

    public Telefonos(Long id) {
        this.id = id;
    }

    public Telefonos(Long id, String Email, long telefonosID) {
        this.id = id;
        this.Email = Email;
        this.telefonosID = telefonosID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTelefonosDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getEmail() {
        return Email;
    }

    public void setEmail(String Email) {
        this.Email = Email;
    }

    public long getTelefonosID() {
        return telefonosID;
    }

    public void setTelefonosID(long telefonosID) {
        this.telefonosID = telefonosID;
    }

    /** To-one relationship, resolved on first access. */
    public Persona getPersona() {
        long __key = this.telefonosID;
        if (persona__resolvedKey == null || !persona__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonaDao targetDao = daoSession.getPersonaDao();
            Persona personaNew = targetDao.load(__key);
            synchronized (this) {
                persona = personaNew;
            	persona__resolvedKey = __key;
            }
        }
        return persona;
    }

    public void setPersona(Persona persona) {
        if (persona == null) {
            throw new DaoException("To-one property 'telefonosID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.persona = persona;
            telefonosID = persona.getId();
            persona__resolvedKey = telefonosID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
