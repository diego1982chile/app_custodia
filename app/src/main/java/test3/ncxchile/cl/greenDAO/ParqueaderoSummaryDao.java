package test3.ncxchile.cl.greenDAO;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import test3.ncxchile.cl.greenDAO.ParqueaderoSummary;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ParqueaderoSummary.
*/
public class ParqueaderoSummaryDao extends AbstractDao<ParqueaderoSummary, Long> {

    public static final String TABLENAME = "ParqueaderoSummary";

    /**
     * Properties of entity ParqueaderoSummary.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nave = new Property(1, String.class, "nave", false, "NAVE");
        public final static Property Numero = new Property(2, Integer.class, "numero", false, "NUMERO");
        public final static Property NumeroEnAgrupador = new Property(3, Integer.class, "numeroEnAgrupador", false, "NUMERO_EN_AGRUPADOR");
        public final static Property Agrupador = new Property(4, Integer.class, "agrupador", false, "AGRUPADOR");
        public final static Property Recinto = new Property(5, String.class, "recinto", false, "RECINTO");
        public final static Property Tribunales = new Property(6, Boolean.class, "tribunales", false, "TRIBUNALES");
        public final static Property Estado = new Property(7, String.class, "estado", false, "ESTADO");
        public final static Property Disponible = new Property(8, Boolean.class, "disponible", false, "DISPONIBLE");
        public final static Property Servicio = new Property(9, Integer.class, "servicio", false, "SERVICIO");
        public final static Property Tamano = new Property(10, String.class, "tamano", false, "TAMANO");
        public final static Property FusionadoConID = new Property(11, long.class, "fusionadoConID", false, "FUSIONADO_CON_ID");
    };

    private Query<ParqueaderoSummary> parqueadero_FusionadoConQuery;

    public ParqueaderoSummaryDao(DaoConfig config) {
        super(config);
    }
    
    public ParqueaderoSummaryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ParqueaderoSummary' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAVE' TEXT," + // 1: nave
                "'NUMERO' INTEGER," + // 2: numero
                "'NUMERO_EN_AGRUPADOR' INTEGER," + // 3: numeroEnAgrupador
                "'AGRUPADOR' INTEGER," + // 4: agrupador
                "'RECINTO' TEXT," + // 5: recinto
                "'TRIBUNALES' INTEGER," + // 6: tribunales
                "'ESTADO' TEXT," + // 7: estado
                "'DISPONIBLE' INTEGER," + // 8: disponible
                "'SERVICIO' INTEGER," + // 9: servicio
                "'TAMANO' TEXT," + // 10: tamano
                "'FUSIONADO_CON_ID' INTEGER NOT NULL );"); // 11: fusionadoConID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ParqueaderoSummary'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ParqueaderoSummary entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nave = entity.getNave();
        if (nave != null) {
            stmt.bindString(2, nave);
        }
 
        Integer numero = entity.getNumero();
        if (numero != null) {
            stmt.bindLong(3, numero);
        }
 
        Integer numeroEnAgrupador = entity.getNumeroEnAgrupador();
        if (numeroEnAgrupador != null) {
            stmt.bindLong(4, numeroEnAgrupador);
        }
 
        Integer agrupador = entity.getAgrupador();
        if (agrupador != null) {
            stmt.bindLong(5, agrupador);
        }
 
        String recinto = entity.getRecinto();
        if (recinto != null) {
            stmt.bindString(6, recinto);
        }
 
        Boolean tribunales = entity.getTribunales();
        if (tribunales != null) {
            stmt.bindLong(7, tribunales ? 1l: 0l);
        }
 
        String estado = entity.getEstado();
        if (estado != null) {
            stmt.bindString(8, estado);
        }
 
        Boolean disponible = entity.getDisponible();
        if (disponible != null) {
            stmt.bindLong(9, disponible ? 1l: 0l);
        }
 
        Integer servicio = entity.getServicio();
        if (servicio != null) {
            stmt.bindLong(10, servicio);
        }
 
        String tamano = entity.getTamano();
        if (tamano != null) {
            stmt.bindString(11, tamano);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ParqueaderoSummary readEntity(Cursor cursor, int offset) {
        ParqueaderoSummary entity = new ParqueaderoSummary( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nave
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // numero
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // numeroEnAgrupador
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // agrupador
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // recinto
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // tribunales
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // estado
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // disponible
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // servicio
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // tamano
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ParqueaderoSummary entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNave(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNumero(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setNumeroEnAgrupador(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAgrupador(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setRecinto(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTribunales(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setEstado(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDisponible(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setServicio(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setTamano(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ParqueaderoSummary entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ParqueaderoSummary entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "fusionadoCon" to-many relationship of Parqueadero. */
    public List<ParqueaderoSummary> _queryParqueadero_FusionadoCon(long fusionadoConID) {
        synchronized (this) {
            if (parqueadero_FusionadoConQuery == null) {
                QueryBuilder<ParqueaderoSummary> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.FusionadoConID.eq(null));
                parqueadero_FusionadoConQuery = queryBuilder.build();
            }
        }
        Query<ParqueaderoSummary> query = parqueadero_FusionadoConQuery.forCurrentThread();
        query.setParameter(0, fusionadoConID);
        return query.list();
    }

}
