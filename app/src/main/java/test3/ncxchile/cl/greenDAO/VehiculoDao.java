package test3.ncxchile.cl.greenDAO;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import test3.ncxchile.cl.greenDAO.Vehiculo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Vehiculo.
*/
public class VehiculoDao extends AbstractDao<Vehiculo, Long> {

    public static final String TABLENAME = "Vehiculo";

    /**
     * Properties of entity Vehiculo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Marca = new Property(1, String.class, "marca", false, "MARCA");
        public final static Property Modelo = new Property(2, String.class, "modelo", false, "MODELO");
        public final static Property Anio = new Property(3, Integer.class, "anio", false, "ANIO");
        public final static Property Color = new Property(4, String.class, "color", false, "COLOR");
        public final static Property Matricula = new Property(5, String.class, "matricula", false, "MATRICULA");
        public final static Property Modificado = new Property(6, Boolean.class, "modificado", false, "MODIFICADO");
        public final static Property Caracteristicas = new Property(7, String.class, "caracteristicas", false, "CARACTERISTICAS");
        public final static Property NumeroChasis = new Property(8, String.class, "numeroChasis", false, "NUMERO_CHASIS");
        public final static Property NumeroMotor = new Property(9, String.class, "numeroMotor", false, "NUMERO_MOTOR");
        public final static Property Tamano = new Property(10, String.class, "tamano", false, "TAMANO");
        public final static Property Kilometraje = new Property(11, Long.class, "kilometraje", false, "KILOMETRAJE");
        public final static Property CarpetaVehiculo = new Property(12, String.class, "carpetaVehiculo", false, "CARPETA_VEHICULO");
        public final static Property Servicio = new Property(13, Integer.class, "servicio", false, "SERVICIO");
        public final static Property Vin = new Property(14, String.class, "vin", false, "VIN");
        public final static Property OrigenVehiculo = new Property(15, Boolean.class, "origenVehiculo", false, "ORIGEN_VEHICULO");
        public final static Property PuedeRodar = new Property(16, Boolean.class, "puedeRodar", false, "PUEDE_RODAR");
        public final static Property Clonado = new Property(17, Boolean.class, "clonado", false, "CLONADO");
        public final static Property FichaEstadovisualID = new Property(18, long.class, "fichaEstadovisualID", false, "FICHA_ESTADOVISUAL_ID");
        public final static Property ParqueaderoSummaryID = new Property(19, long.class, "parqueaderoSummaryID", false, "PARQUEADERO_SUMMARY_ID");
    };

    private DaoSession daoSession;


    public VehiculoDao(DaoConfig config) {
        super(config);
    }
    
    public VehiculoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Vehiculo' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MARCA' TEXT," + // 1: marca
                "'MODELO' TEXT," + // 2: modelo
                "'ANIO' INTEGER," + // 3: anio
                "'COLOR' TEXT," + // 4: color
                "'MATRICULA' TEXT," + // 5: matricula
                "'MODIFICADO' INTEGER," + // 6: modificado
                "'CARACTERISTICAS' TEXT," + // 7: caracteristicas
                "'NUMERO_CHASIS' TEXT," + // 8: numeroChasis
                "'NUMERO_MOTOR' TEXT," + // 9: numeroMotor
                "'TAMANO' TEXT," + // 10: tamano
                "'KILOMETRAJE' INTEGER," + // 11: kilometraje
                "'CARPETA_VEHICULO' TEXT," + // 12: carpetaVehiculo
                "'SERVICIO' INTEGER," + // 13: servicio
                "'VIN' TEXT," + // 14: vin
                "'ORIGEN_VEHICULO' INTEGER," + // 15: origenVehiculo
                "'PUEDE_RODAR' INTEGER," + // 16: puedeRodar
                "'CLONADO' INTEGER," + // 17: clonado
                "'FICHA_ESTADOVISUAL_ID' INTEGER NOT NULL ," + // 18: fichaEstadovisualID
                "'PARQUEADERO_SUMMARY_ID' INTEGER NOT NULL );"); // 19: parqueaderoSummaryID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Vehiculo'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Vehiculo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String marca = entity.getMarca();
        if (marca != null) {
            stmt.bindString(2, marca);
        }
 
        String modelo = entity.getModelo();
        if (modelo != null) {
            stmt.bindString(3, modelo);
        }
 
        Integer anio = entity.getAnio();
        if (anio != null) {
            stmt.bindLong(4, anio);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(5, color);
        }
 
        String matricula = entity.getMatricula();
        if (matricula != null) {
            stmt.bindString(6, matricula);
        }
 
        Boolean modificado = entity.getModificado();
        if (modificado != null) {
            stmt.bindLong(7, modificado ? 1l: 0l);
        }
 
        String caracteristicas = entity.getCaracteristicas();
        if (caracteristicas != null) {
            stmt.bindString(8, caracteristicas);
        }
 
        String numeroChasis = entity.getNumeroChasis();
        if (numeroChasis != null) {
            stmt.bindString(9, numeroChasis);
        }
 
        String numeroMotor = entity.getNumeroMotor();
        if (numeroMotor != null) {
            stmt.bindString(10, numeroMotor);
        }
 
        String tamano = entity.getTamano();
        if (tamano != null) {
            stmt.bindString(11, tamano);
        }
 
        Long kilometraje = entity.getKilometraje();
        if (kilometraje != null) {
            stmt.bindLong(12, kilometraje);
        }
 
        String carpetaVehiculo = entity.getCarpetaVehiculo();
        if (carpetaVehiculo != null) {
            stmt.bindString(13, carpetaVehiculo);
        }
 
        Integer servicio = entity.getServicio();
        if (servicio != null) {
            stmt.bindLong(14, servicio);
        }
 
        String vin = entity.getVin();
        if (vin != null) {
            stmt.bindString(15, vin);
        }
 
        Boolean origenVehiculo = entity.getOrigenVehiculo();
        if (origenVehiculo != null) {
            stmt.bindLong(16, origenVehiculo ? 1l: 0l);
        }
 
        Boolean puedeRodar = entity.getPuedeRodar();
        if (puedeRodar != null) {
            stmt.bindLong(17, puedeRodar ? 1l: 0l);
        }
 
        Boolean clonado = entity.getClonado();
        if (clonado != null) {
            stmt.bindLong(18, clonado ? 1l: 0l);
        }
        stmt.bindLong(19, entity.getFichaEstadovisualID());
        stmt.bindLong(20, entity.getParqueaderoSummaryID());
    }

    @Override
    protected void attachEntity(Vehiculo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Vehiculo readEntity(Cursor cursor, int offset) {
        Vehiculo entity = new Vehiculo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // marca
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // modelo
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // anio
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // color
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // matricula
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // modificado
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // caracteristicas
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // numeroChasis
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // numeroMotor
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // tamano
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // kilometraje
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // carpetaVehiculo
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // servicio
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // vin
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // origenVehiculo
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // puedeRodar
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // clonado
            cursor.getLong(offset + 18), // fichaEstadovisualID
            cursor.getLong(offset + 19) // parqueaderoSummaryID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Vehiculo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMarca(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setModelo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAnio(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setColor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMatricula(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setModificado(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setCaracteristicas(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNumeroChasis(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNumeroMotor(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTamano(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setKilometraje(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setCarpetaVehiculo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setServicio(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setVin(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOrigenVehiculo(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setPuedeRodar(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setClonado(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setFichaEstadovisualID(cursor.getLong(offset + 18));
        entity.setParqueaderoSummaryID(cursor.getLong(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Vehiculo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Vehiculo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getParqueaderoSummaryDao().getAllColumns());
            builder.append(" FROM Vehiculo T");
            builder.append(" LEFT JOIN ParqueaderoSummary T0 ON T.'PARQUEADERO_SUMMARY_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Vehiculo loadCurrentDeep(Cursor cursor, boolean lock) {
        Vehiculo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ParqueaderoSummary parqueaderoSummary = loadCurrentOther(daoSession.getParqueaderoSummaryDao(), cursor, offset);
         if(parqueaderoSummary != null) {
            entity.setParqueaderoSummary(parqueaderoSummary);
        }

        return entity;    
    }

    public Vehiculo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Vehiculo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Vehiculo> list = new ArrayList<Vehiculo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Vehiculo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Vehiculo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
