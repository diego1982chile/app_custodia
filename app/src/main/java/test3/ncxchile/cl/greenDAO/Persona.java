package test3.ncxchile.cl.greenDAO;

import java.util.List;
import test3.ncxchile.cl.greenDAO.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table persona.
 */
public class Persona {

    private Long id;
    private String nombre;
    private String rut;
    private String apellidoPaterno;
    private String apellidoMaterno;
    private String usuario;
    private long correosID;
    private long telefonosID;
    private long direccion2ID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PersonaDao myDao;

    private Direccion direccion;
    private Long direccion__resolvedKey;

    private List<Correos> correos;
    private List<Telefonos> telefonos;

    public Persona() {
    }

    public Persona(Long id) {
        this.id = id;
    }

    public Persona(Long id, String nombre, String rut, String apellidoPaterno, String apellidoMaterno, String usuario, long correosID, long telefonosID, long direccion2ID) {
        this.id = id;
        this.nombre = nombre;
        this.rut = rut;
        this.apellidoPaterno = apellidoPaterno;
        this.apellidoMaterno = apellidoMaterno;
        this.usuario = usuario;
        this.correosID = correosID;
        this.telefonosID = telefonosID;
        this.direccion2ID = direccion2ID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPersonaDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getRut() {
        return rut;
    }

    public void setRut(String rut) {
        this.rut = rut;
    }

    public String getApellidoPaterno() {
        return apellidoPaterno;
    }

    public void setApellidoPaterno(String apellidoPaterno) {
        this.apellidoPaterno = apellidoPaterno;
    }

    public String getApellidoMaterno() {
        return apellidoMaterno;
    }

    public void setApellidoMaterno(String apellidoMaterno) {
        this.apellidoMaterno = apellidoMaterno;
    }

    public String getUsuario() {
        return usuario;
    }

    public void setUsuario(String usuario) {
        this.usuario = usuario;
    }

    public long getCorreosID() {
        return correosID;
    }

    public void setCorreosID(long correosID) {
        this.correosID = correosID;
    }

    public long getTelefonosID() {
        return telefonosID;
    }

    public void setTelefonosID(long telefonosID) {
        this.telefonosID = telefonosID;
    }

    public long getDireccion2ID() {
        return direccion2ID;
    }

    public void setDireccion2ID(long direccion2ID) {
        this.direccion2ID = direccion2ID;
    }

    /** To-one relationship, resolved on first access. */
    public Direccion getDireccion() {
        long __key = this.direccion2ID;
        if (direccion__resolvedKey == null || !direccion__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DireccionDao targetDao = daoSession.getDireccionDao();
            Direccion direccionNew = targetDao.load(__key);
            synchronized (this) {
                direccion = direccionNew;
            	direccion__resolvedKey = __key;
            }
        }
        return direccion;
    }

    public void setDireccion(Direccion direccion) {
        if (direccion == null) {
            throw new DaoException("To-one property 'direccion2ID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.direccion = direccion;
            direccion2ID = direccion.getId();
            direccion__resolvedKey = direccion2ID;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Correos> getCorreos() {

        if (correos == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CorreosDao targetDao = daoSession.getCorreosDao();
            List<Correos> correosNew = targetDao._queryPersona_Correos(id);
            synchronized (this) {
                if(correos == null) {
                    correos = correosNew;
                }
            }
        }
        return correos;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCorreos() {
        correos = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Telefonos> getTelefonos() {
        if (telefonos == null) {
            System.out.println("ENTRE");
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TelefonosDao targetDao = daoSession.getTelefonosDao();
            List<Telefonos> telefonosNew = targetDao._queryPersona_Telefonos(id);
            System.out.println("telefonosNew="+telefonosNew.isEmpty());
            synchronized (this) {
                if(telefonos == null) {
                    telefonos = telefonosNew;
                }
            }
        }
        return telefonos;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTelefonos() {
        telefonos = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
