package test3.ncxchile.cl.greenDAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import test3.ncxchile.cl.greenDAO.Direccion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table direccion.
*/
public class DireccionDao extends AbstractDao<Direccion, Long> {

    public static final String TABLENAME = "direccion";

    /**
     * Properties of entity Direccion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Calle = new Property(1, String.class, "calle", false, "CALLE");
        public final static Property Numeracion = new Property(2, String.class, "numeracion", false, "NUMERACION");
        public final static Property Interseccion = new Property(3, String.class, "interseccion", false, "INTERSECCION");
        public final static Property Referencias = new Property(4, String.class, "referencias", false, "REFERENCIAS");
        public final static Property Comuna = new Property(5, String.class, "comuna", false, "COMUNA");
    };


    public DireccionDao(DaoConfig config) {
        super(config);
    }
    
    public DireccionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'direccion' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CALLE' TEXT," + // 1: calle
                "'NUMERACION' TEXT," + // 2: numeracion
                "'INTERSECCION' TEXT," + // 3: interseccion
                "'REFERENCIAS' TEXT," + // 4: referencias
                "'COMUNA' TEXT);"); // 5: comuna
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'direccion'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Direccion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String calle = entity.getCalle();
        if (calle != null) {
            stmt.bindString(2, calle);
        }
 
        String numeracion = entity.getNumeracion();
        if (numeracion != null) {
            stmt.bindString(3, numeracion);
        }
 
        String interseccion = entity.getInterseccion();
        if (interseccion != null) {
            stmt.bindString(4, interseccion);
        }
 
        String referencias = entity.getReferencias();
        if (referencias != null) {
            stmt.bindString(5, referencias);
        }
 
        String comuna = entity.getComuna();
        if (comuna != null) {
            stmt.bindString(6, comuna);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Direccion readEntity(Cursor cursor, int offset) {
        Direccion entity = new Direccion( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // calle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // numeracion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // interseccion
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // referencias
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // comuna
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Direccion entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCalle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNumeracion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInterseccion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReferencias(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setComuna(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Direccion entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Direccion entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
