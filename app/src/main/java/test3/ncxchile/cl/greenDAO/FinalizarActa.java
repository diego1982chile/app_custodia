package test3.ncxchile.cl.greenDAO;

import test3.ncxchile.cl.greenDAO.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table finalizarActa.
 */
public class FinalizarActa {

    private Long id;
    private String georef;
    private String firmaAutoridad;
    private String firmaGruero;
    private long actaID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FinalizarActaDao myDao;

    private Acta acta;
    private Long acta__resolvedKey;


    public FinalizarActa() {
    }

    public FinalizarActa(Long id) {
        this.id = id;
    }

    public FinalizarActa(Long id, String georef, String firmaAutoridad, String firmaGruero, long actaID) {
        this.id = id;
        this.georef = georef;
        this.firmaAutoridad = firmaAutoridad;
        this.firmaGruero = firmaGruero;
        this.actaID = actaID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFinalizarActaDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getGeoref() {
        return georef;
    }

    public void setGeoref(String georef) {
        this.georef = georef;
    }

    public String getFirmaAutoridad() {
        return firmaAutoridad;
    }

    public void setFirmaAutoridad(String firmaAutoridad) {
        this.firmaAutoridad = firmaAutoridad;
    }

    public String getFirmaGruero() {
        return firmaGruero;
    }

    public void setFirmaGruero(String firmaGruero) {
        this.firmaGruero = firmaGruero;
    }

    public long getActaID() {
        return actaID;
    }

    public void setActaID(long actaID) {
        this.actaID = actaID;
    }

    /** To-one relationship, resolved on first access. */
    public Acta getActa() {
        long __key = this.actaID;
        if (acta__resolvedKey == null || !acta__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ActaDao targetDao = daoSession.getActaDao();
            Acta actaNew = targetDao.load(__key);
            synchronized (this) {
                acta = actaNew;
            	acta__resolvedKey = __key;
            }
        }
        return acta;
    }

    public void setActa(Acta acta) {
        if (acta == null) {
            throw new DaoException("To-one property 'actaID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.acta = acta;
            actaID = acta.getId();
            acta__resolvedKey = actaID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
