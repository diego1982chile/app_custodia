package test3.ncxchile.cl.greenDAO;

import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ACCION.
*/
public class AccionDao extends AbstractDao<Accion, Long> {

    public static final String TABLENAME = "ACCION";

    /**
     * Properties of entity Accion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nombre = new Property(1, String.class, "Nombre", false, "NOMBRE");
        public final static Property Fecha = new Property(2, String.class, "Fecha", false, "FECHA");
        public final static Property Hora = new Property(3, String.class, "Hora", false, "HORA");
        public final static Property TimeStamp = new Property(4, Date.class, "timeStamp", false, "TIME_STAMP");
        public final static Property Longitud = new Property(5, Float.class, "longitud", false, "LONGITUD");
        public final static Property Latitud = new Property(6, Float.class, "latitud", false, "LATITUD");
        public final static Property Sincronizada = new Property(7, Boolean.class, "sincronizada", false, "SINCRONIZADA");
        public final static Property IdTarea = new Property(8, long.class, "idTarea", false, "ID_TAREA");
        public final static Property IdMapa = new Property(9, Long.class, "idMapa", false, "ID_MAPA");
        public final static Property IdActa = new Property(10, Long.class, "idActa", false, "ID_ACTA");
    };

    private DaoSession daoSession;

    private Query<Accion> tarea_AccionesQuery;
    private Query<Accion> acta_AccionQuery;

    public AccionDao(DaoConfig config) {
        super(config);
    }
    
    public AccionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ACCION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NOMBRE' TEXT," + // 1: Nombre
                "'FECHA' TEXT," + // 2: Fecha
                "'HORA' TEXT," + // 3: Hora
                "'TIME_STAMP' INTEGER NOT NULL ," + // 4: timeStamp
                "'LONGITUD' REAL," + // 5: longitud
                "'LATITUD' REAL," + // 6: latitud
                "'SINCRONIZADA' INTEGER," + // 7: sincronizada
                "'ID_TAREA' INTEGER NOT NULL ," + // 8: idTarea
                "'ID_MAPA' INTEGER," + // 9: idMapa
                "'ID_ACTA' INTEGER);"); // 10: idActa
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ACCION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Accion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Nombre = entity.getNombre();
        if (Nombre != null) {
            stmt.bindString(2, Nombre);
        }
 
        String Fecha = entity.getFecha();
        if (Fecha != null) {
            stmt.bindString(3, Fecha);
        }
 
        String Hora = entity.getHora();
        if (Hora != null) {
            stmt.bindString(4, Hora);
        }
        stmt.bindLong(5, entity.getTimeStamp().getTime());
 
        Float longitud = entity.getLongitud();
        if (longitud != null) {
            stmt.bindDouble(6, longitud);
        }
 
        Float latitud = entity.getLatitud();
        if (latitud != null) {
            stmt.bindDouble(7, latitud);
        }
 
        Boolean sincronizada = entity.getSincronizada();
        if (sincronizada != null) {
            stmt.bindLong(8, sincronizada ? 1l: 0l);
        }
        stmt.bindLong(9, entity.getIdTarea());
 
        Long idMapa = entity.getIdMapa();
        if (idMapa != null) {
            stmt.bindLong(10, idMapa);
        }
 
        Long idActa = entity.getIdActa();
        if (idActa != null) {
            stmt.bindLong(11, idActa);
        }
    }

    @Override
    protected void attachEntity(Accion entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Accion readEntity(Cursor cursor, int offset) {
        Accion entity = new Accion( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Nombre
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Fecha
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Hora
            new Date(cursor.getLong(offset + 4)), // timeStamp
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // longitud
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // latitud
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // sincronizada
            cursor.getLong(offset + 8), // idTarea
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // idMapa
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // idActa
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Accion entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFecha(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHora(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimeStamp(new Date(cursor.getLong(offset + 4)));
        entity.setLongitud(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setLatitud(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setSincronizada(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setIdTarea(cursor.getLong(offset + 8));
        entity.setIdMapa(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setIdActa(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Accion entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Accion entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "acciones" to-many relationship of Tarea. */
    public List<Accion> _queryTarea_Acciones(long idTarea) {
        synchronized (this) {
            if (tarea_AccionesQuery == null) {
                QueryBuilder<Accion> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdTarea.eq(null));
                queryBuilder.orderRaw("TIME_STAMP ASC");
                tarea_AccionesQuery = queryBuilder.build();
            }
        }
        Query<Accion> query = tarea_AccionesQuery.forCurrentThread();
        query.setParameter(0, idTarea);
        return query.list();
    }

    /** Internal query to resolve the "accion" to-many relationship of Acta. */
    public List<Accion> _queryActa_Accion(Long idActa) {
        synchronized (this) {
            if (acta_AccionQuery == null) {
                QueryBuilder<Accion> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdActa.eq(null));
                queryBuilder.orderRaw("TIME_STAMP ASC");
                acta_AccionQuery = queryBuilder.build();
            }
        }
        Query<Accion> query = acta_AccionQuery.forCurrentThread();
        query.setParameter(0, idActa);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTareaDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getActaDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getMapaDao().getAllColumns());
            builder.append(" FROM ACCION T");
            builder.append(" LEFT JOIN TAREA T0 ON T.'ID_TAREA'=T0.'_id'");
            builder.append(" LEFT JOIN ACTA T1 ON T.'ID_ACTA'=T1.'_id'");
            builder.append(" LEFT JOIN MAPA T2 ON T.'ID_MAPA'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Accion loadCurrentDeep(Cursor cursor, boolean lock) {
        Accion entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Tarea tarea = loadCurrentOther(daoSession.getTareaDao(), cursor, offset);
         if(tarea != null) {
            entity.setTarea(tarea);
        }
        offset += daoSession.getTareaDao().getAllColumns().length;

        Acta acta = loadCurrentOther(daoSession.getActaDao(), cursor, offset);
        entity.setActa(acta);
        offset += daoSession.getActaDao().getAllColumns().length;

        Mapa mapa = loadCurrentOther(daoSession.getMapaDao(), cursor, offset);
        entity.setMapa(mapa);

        return entity;    
    }

    public Accion loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Accion> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Accion> list = new ArrayList<Accion>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Accion> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Accion> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

    public List getLast(Date fecha){
        List acciones= queryBuilder()
                .where(Properties.TimeStamp.between(fecha,new Date()))
                .list();
        return acciones;
    }

    public boolean isNotEmpty(){
        List acciones= queryBuilder()
                .where(Properties.Sincronizada.eq(false))
                .list();
        if(acciones.size()>0)
            return true;
        else
            return false;
    }

    public Accion getNext(){
        List acciones= queryBuilder()
                .where(Properties.Sincronizada.eq(false)).orderAsc(Properties.TimeStamp)
                .list();
        if(acciones.size()>0)
            return (Accion)acciones.get(0);
        else
            return null;
    }

    public List getAccionesSinMapa(){
        List acciones= queryBuilder()
                .where(Properties.Sincronizada.eq(false),Properties.IdMapa.isNull())
                .list();
        return acciones;
    }
}
