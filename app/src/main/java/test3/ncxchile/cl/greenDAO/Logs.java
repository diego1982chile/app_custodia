package test3.ncxchile.cl.greenDAO;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table LOGS.
 */
public class Logs {

    private Long id;
    private String fecha;
    private String hora;
    /** Not-null value. */
    private java.util.Date timeStamp;
    private Float longitud;
    private Float latitud;
    private String descripcion;
    private long idSesion;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LogsDao myDao;

    private Sesion sesion;
    private Long sesion__resolvedKey;


    public Logs() {
    }

    public Logs(Long id) {
        this.id = id;
    }

    public Logs(Long id, String fecha, String hora, java.util.Date timeStamp, Float longitud, Float latitud, String descripcion, long idSesion) {
        this.id = id;
        this.fecha = fecha;
        this.hora = hora;
        this.timeStamp = timeStamp;
        this.longitud = longitud;
        this.latitud = latitud;
        this.descripcion = descripcion;
        this.idSesion = idSesion;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLogsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getFecha() {
        return fecha;
    }

    public void setFecha(String fecha) {
        this.fecha = fecha;
    }

    public String getHora() {
        return hora;
    }

    public void setHora(String hora) {
        this.hora = hora;
    }

    /** Not-null value. */
    public java.util.Date getTimeStamp() {
        return timeStamp;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTimeStamp(java.util.Date timeStamp) {
        this.timeStamp = timeStamp;
    }

    public Float getLongitud() {
        return longitud;
    }

    public void setLongitud(Float longitud) {
        this.longitud = longitud;
    }

    public Float getLatitud() {
        return latitud;
    }

    public void setLatitud(Float latitud) {
        this.latitud = latitud;
    }

    public String getDescripcion() {
        return descripcion;
    }

    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }

    public long getIdSesion() {
        return idSesion;
    }

    public void setIdSesion(long idSesion) {
        this.idSesion = idSesion;
    }

    /** To-one relationship, resolved on first access. */
    public Sesion getSesion() {
        long __key = this.idSesion;
        if (sesion__resolvedKey == null || !sesion__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SesionDao targetDao = daoSession.getSesionDao();
            Sesion sesionNew = targetDao.load(__key);
            synchronized (this) {
                sesion = sesionNew;
            	sesion__resolvedKey = __key;
            }
        }
        return sesion;
    }

    public void setSesion(Sesion sesion) {
        if (sesion == null) {
            throw new DaoException("To-one property 'idSesion' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.sesion = sesion;
            idSesion = sesion.getId();
            sesion__resolvedKey = idSesion;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
