package test3.ncxchile.cl.greenDAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.Arrays;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import test3.ncxchile.cl.db.Global;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TAREA.
*/
public class TareaDao extends AbstractDao<Tarea, Long> {

    public static final String TABLENAME = "TAREA";

    /**
     * Properties of entity Tarea.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Servicio = new Property(1, Integer.class, "servicio", false, "SERVICIO");
        public final static Property Fecha = new Property(2, String.class, "fecha", false, "FECHA");
        public final static Property Hora = new Property(3, String.class, "hora", false, "HORA");
        public final static Property TimeStamp = new Property(4, java.util.Date.class, "timeStamp", false, "TIME_STAMP");
        public final static Property Tamano = new Property(5, String.class, "tamano", false, "TAMANO");
        public final static Property Direccion = new Property(6, String.class, "direccion", false, "DIRECCION");
        public final static Property Comuna = new Property(7, String.class, "comuna", false, "COMUNA");
        public final static Property Estado = new Property(8, String.class, "estado", false, "ESTADO");
        public final static Property Recinto = new Property(9, String.class, "recinto", false, "RECINTO");
        public final static Property Status = new Property(10, Integer.class, "status", false, "STATUS");
    };

    private DaoSession daoSession;


    public TareaDao(DaoConfig config) {
        super(config);
    }
    
    public TareaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TAREA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SERVICIO' INTEGER," + // 1: servicio
                "'FECHA' TEXT," + // 2: fecha
                "'HORA' TEXT," + // 3: hora
                "'TIME_STAMP' INTEGER," + // 4: timeStamp
                "'TAMANO' TEXT," + // 5: tamano
                "'DIRECCION' TEXT," + // 6: direccion
                "'COMUNA' TEXT," + // 7: comuna
                "'ESTADO' TEXT," + // 8: estado
                "'RECINTO' TEXT," + // 9: recinto
                "'STATUS' INTEGER);"); // 10: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TAREA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Tarea entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer servicio = entity.getServicio();
        if (servicio != null) {
            stmt.bindLong(2, servicio);
        }
 
        String fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindString(3, fecha);
        }
 
        String hora = entity.getHora();
        if (hora != null) {
            stmt.bindString(4, hora);
        }
 
        java.util.Date timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(5, timeStamp.getTime());
        }
 
        String tamano = entity.getTamano();
        if (tamano != null) {
            stmt.bindString(6, tamano);
        }
 
        String direccion = entity.getDireccion();
        if (direccion != null) {
            stmt.bindString(7, direccion);
        }
 
        String comuna = entity.getComuna();
        if (comuna != null) {
            stmt.bindString(8, comuna);
        }
 
        String estado = entity.getEstado();
        if (estado != null) {
            stmt.bindString(9, estado);
        }
 
        String recinto = entity.getRecinto();
        if (recinto != null) {
            stmt.bindString(10, recinto);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(11, status);
        }
    }

    @Override
    protected void attachEntity(Tarea entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Tarea readEntity(Cursor cursor, int offset) {
        Tarea entity = new Tarea( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // servicio
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fecha
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hora
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // timeStamp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tamano
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // direccion
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // comuna
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // estado
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // recinto
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Tarea entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServicio(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setFecha(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHora(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimeStamp(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setTamano(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDireccion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setComuna(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEstado(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRecinto(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStatus(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Tarea entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Tarea entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    public List getAll(){
        List tareas= queryBuilder()
                .list();
        return tareas;
    }

    public List getAsignadas(){
        List tareas= queryBuilder()
                .where(Properties.Status.in(Arrays.asList(0, 1, 2, 3))).orderAsc(Properties.TimeStamp).list();
        return tareas;
    }

    public Tarea getById(Integer idTarea){
        return queryBuilder()
                .where(Properties.Id.eq(idTarea))
                .unique();
    }

    public Tarea getByServicio(Integer servicio){
        return queryBuilder()
                .where(Properties.Servicio.eq(servicio))
                .unique();
    }

    public Integer getStatusTarea(long idTarea){
        Tarea tarea= queryBuilder()
                .where(Properties.Id.eq(idTarea))
                .unique();
        refresh(tarea);
        return tarea.getStatus();
    }

    public void setStatusTarea(long idTarea, Integer status){
        Tarea tarea= queryBuilder()
                .where(Properties.Id.eq(idTarea))
                .unique();
        if(tarea!=null) {
            tarea.setStatus(status);
            update(tarea);
        }
        return;
    }

    public void actualizarTareas(List tareasVigentes){
        final List tareasNoVigentes=queryBuilder()
                .where(Properties.Servicio.notIn(tareasVigentes),Properties.Status.eq(0))
                .list();
        Global.daoSession.runInTx(new Runnable() {
            @Override
            public void run() {

                for (int i = 0; i < tareasNoVigentes.size(); ++i) {
                    Tarea tarea = (Tarea) tareasNoVigentes.get(i);
                    tarea.setStatus(-1);
                    update(tarea);
                    refresh(tarea);
                }
            }
        });
    }

    public String toString(Tarea tarea)
    {
        return tarea.getServicio().toString()+","+
                tarea.getTamano().toString()+","+
                tarea.getDireccion().toString()+","+
                tarea.getComuna().toString()+","+
                tarea.getFecha().toString();
    }
    
}
