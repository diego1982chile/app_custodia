package test3.ncxchile.cl.greenDAO;

import java.util.List;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ESTADO_VISUAL.
 */
public class EstadoVisual {

    private Long id;
    private String nombre;
    private Boolean respuestaBinaria;
    private Boolean habilitado;
    private Integer tipo;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EstadoVisualDao myDao;

    private List<FichaEstadoVisual> FichaEstadoVisual;

    public EstadoVisual() {
    }

    public EstadoVisual(Long id) {
        this.id = id;
    }

    public EstadoVisual(Long id, String nombre, Boolean respuestaBinaria, Boolean habilitado, Integer tipo) {
        this.id = id;
        this.nombre = nombre;
        this.respuestaBinaria = respuestaBinaria;
        this.habilitado = habilitado;
        this.tipo = tipo;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEstadoVisualDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public Boolean getRespuestaBinaria() {
        return respuestaBinaria;
    }

    public void setRespuestaBinaria(Boolean respuestaBinaria) {
        this.respuestaBinaria = respuestaBinaria;
    }

    public Boolean getHabilitado() {
        return habilitado;
    }

    public void setHabilitado(Boolean habilitado) {
        this.habilitado = habilitado;
    }

    public Integer getTipo() {
        return tipo;
    }

    public void setTipo(Integer tipo) {
        this.tipo = tipo;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<FichaEstadoVisual> getFichaEstadoVisual() {
        if (FichaEstadoVisual == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FichaEstadoVisualDao targetDao = daoSession.getFichaEstadoVisualDao();
            List<FichaEstadoVisual> FichaEstadoVisualNew = targetDao._queryEstadoVisual_FichaEstadoVisual(id);
            synchronized (this) {
                if(FichaEstadoVisual == null) {
                    FichaEstadoVisual = FichaEstadoVisualNew;
                }
            }
        }
        return FichaEstadoVisual;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFichaEstadoVisual() {
        FichaEstadoVisual = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
