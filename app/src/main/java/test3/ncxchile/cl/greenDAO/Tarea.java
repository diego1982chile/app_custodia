package test3.ncxchile.cl.greenDAO;

import java.util.List;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TAREA.
 */
public class Tarea {

    private Long id;
    private Integer servicio;
    private String fecha;
    private String hora;
    private java.util.Date timeStamp;
    private String tamano;
    private String direccion;
    private String comuna;
    private String estado;
    private String recinto;
    private Integer status;
    private long idUser;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TareaDao myDao;

    private User user;
    private Long user__resolvedKey;

    private List<Accion> acciones;

    public Tarea() {
    }

    public Tarea(Long id) {
        this.id = id;
    }

    public Tarea(Long id, Integer servicio, String fecha, String hora, java.util.Date timeStamp, String tamano, String direccion, String comuna, String estado, String recinto, Integer status, long idUser) {
        this.id = id;
        this.servicio = servicio;
        this.fecha = fecha;
        this.hora = hora;
        this.timeStamp = timeStamp;
        this.tamano = tamano;
        this.direccion = direccion;
        this.comuna = comuna;
        this.estado = estado;
        this.recinto = recinto;
        this.status = status;
        this.idUser = idUser;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTareaDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getServicio() {
        return servicio;
    }

    public void setServicio(Integer servicio) {
        this.servicio = servicio;
    }

    public String getFecha() {
        return fecha;
    }

    public void setFecha(String fecha) {
        this.fecha = fecha;
    }

    public String getHora() {
        return hora;
    }

    public void setHora(String hora) {
        this.hora = hora;
    }

    public java.util.Date getTimeStamp() {
        return timeStamp;
    }

    public void setTimeStamp(java.util.Date timeStamp) {
        this.timeStamp = timeStamp;
    }

    public String getTamano() {
        return tamano;
    }

    public void setTamano(String tamano) {
        this.tamano = tamano;
    }

    public String getDireccion() {
        return direccion;
    }

    public void setDireccion(String direccion) {
        this.direccion = direccion;
    }

    public String getComuna() {
        return comuna;
    }

    public void setComuna(String comuna) {
        this.comuna = comuna;
    }

    public String getEstado() {
        return estado;
    }

    public void setEstado(String estado) {
        this.estado = estado;
    }

    public String getRecinto() {
        return recinto;
    }

    public void setRecinto(String recinto) {
        this.recinto = recinto;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public long getIdUser() {
        return idUser;
    }

    public void setIdUser(long idUser) {
        this.idUser = idUser;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        long __key = this.idUser;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        if (user == null) {
            throw new DaoException("To-one property 'idUser' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.user = user;
            idUser = user.getId();
            user__resolvedKey = idUser;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Accion> getAcciones() {
        if (acciones == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AccionDao targetDao = daoSession.getAccionDao();
            List<Accion> accionesNew = targetDao._queryTarea_Acciones(id);
            synchronized (this) {
                if(acciones == null) {
                    acciones = accionesNew;
                }
            }
        }
        return acciones;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAcciones() {
        acciones = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
