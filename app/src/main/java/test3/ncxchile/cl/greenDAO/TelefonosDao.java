package test3.ncxchile.cl.greenDAO;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import test3.ncxchile.cl.greenDAO.Telefonos;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table telefonos.
*/
public class TelefonosDao extends AbstractDao<Telefonos, Long> {

    public static final String TABLENAME = "telefonos";

    /**
     * Properties of entity Telefonos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Email = new Property(1, String.class, "email", false, "EMAIL");
        public final static Property TelefonosID = new Property(2, long.class, "telefonosID", false, "TELEFONOS_ID");
    };

    private Query<Telefonos> persona_TelefonosQuery;

    public TelefonosDao(DaoConfig config) {
        super(config);
    }
    
    public TelefonosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'telefonos' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'EMAIL' TEXT," + // 1: email
                "'TELEFONOS_ID' INTEGER NOT NULL );"); // 2: telefonosID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'telefonos'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Telefonos entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Telefonos readEntity(Cursor cursor, int offset) {
        Telefonos entity = new Telefonos( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // email
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Telefonos entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Telefonos entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Telefonos entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "telefonos" to-many relationship of Persona. */
    public List<Telefonos> _queryPersona_Telefonos(long telefonosID) {
        synchronized (this) {
            if (persona_TelefonosQuery == null) {
                QueryBuilder<Telefonos> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TelefonosID.eq(null));
                persona_TelefonosQuery = queryBuilder.build();
            }
        }
        Query<Telefonos> query = persona_TelefonosQuery.forCurrentThread();
        query.setParameter(0, telefonosID);
        return query.list();
    }

}
