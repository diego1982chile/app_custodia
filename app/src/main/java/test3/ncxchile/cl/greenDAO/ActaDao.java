package test3.ncxchile.cl.greenDAO;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Acta.
*/
public class ActaDao extends AbstractDao<Acta, Long> {

    public static final String TABLENAME = "Acta";

    /**
     * Properties of entity Acta.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Observacion = new Property(1, String.class, "observacion", false, "OBSERVACION");
        public final static Property CausaRetiro = new Property(2, String.class, "causaRetiro", false, "CAUSA_RETIRO");
        public final static Property ExistImage = new Property(3, Boolean.class, "existImage", false, "EXIST_IMAGE");
        public final static Property ExistVideo = new Property(4, Boolean.class, "existVideo", false, "EXIST_VIDEO");
        public final static Property FechaCreacion = new Property(5, java.util.Date.class, "fechaCreacion", false, "FECHA_CREACION");
        public final static Property FechaFirma = new Property(6, java.util.Date.class, "fechaFirma", false, "FECHA_FIRMA");
        public final static Property IdSolicitud = new Property(7, Integer.class, "idSolicitud", false, "ID_SOLICITUD");
        public final static Property IdOt = new Property(8, Integer.class, "idOt", false, "ID_OT");
        public final static Property IdGrua = new Property(9, Integer.class, "idGrua", false, "ID_GRUA");
        public final static Property Fiscalia = new Property(10, Boolean.class, "fiscalia", false, "FISCALIA");
        public final static Property Nue = new Property(11, String.class, "nue", false, "NUE");
        public final static Property Ruc = new Property(12, String.class, "ruc", false, "RUC");
        public final static Property Parte = new Property(13, String.class, "parte", false, "PARTE");
        public final static Property UnidadPolicial = new Property(14, String.class, "unidadPolicial", false, "UNIDAD_POLICIAL");
        public final static Property FechaParte = new Property(15, java.util.Date.class, "fechaParte", false, "FECHA_PARTE");
        public final static Property Servicio = new Property(16, Integer.class, "servicio", false, "SERVICIO");
        public final static Property GruaExterna = new Property(17, Boolean.class, "gruaExterna", false, "GRUA_EXTERNA");
        public final static Property ObservacionImgenes = new Property(18, String.class, "observacionImgenes", false, "OBSERVACION_IMGENES");
        public final static Property NombreExterno = new Property(19, String.class, "nombreExterno", false, "NOMBRE_EXTERNO");
        public final static Property NumeroFactura = new Property(20, Integer.class, "numeroFactura", false, "NUMERO_FACTURA");
        public final static Property MontoFactura = new Property(21, Integer.class, "montoFactura", false, "MONTO_FACTURA");
        public final static Property NumeroPatente = new Property(22, String.class, "numeroPatente", false, "NUMERO_PATENTE");
        public final static Property CargaInicial = new Property(23, Boolean.class, "cargaInicial", false, "CARGA_INICIAL");
        public final static Property ActaIncautacion = new Property(24, String.class, "actaIncautacion", false, "ACTA_INCAUTACION");
        public final static Property OficioRemisor = new Property(25, String.class, "oficioRemisor", false, "OFICIO_REMISOR");
        public final static Property VehiculoDataID = new Property(26, long.class, "vehiculoDataID", false, "VEHICULO_DATA_ID");
        public final static Property DireccionID = new Property(27, long.class, "direccionID", false, "DIRECCION_ID");
        public final static Property AutoridadID = new Property(28, long.class, "autoridadID", false, "AUTORIDAD_ID");
        public final static Property GrueroID = new Property(29, long.class, "grueroID", false, "GRUERO_ID");
        public final static Property TribunalID = new Property(30, long.class, "tribunalID", false, "TRIBUNAL_ID");
        public final static Property TareaId = new Property(31, long.class, "tareaId", false, "TAREA_ID");
        public final static Property FirmaID = new Property(32, long.class, "FirmaID", false, "FIRMA_ID");
    };

    private DaoSession daoSession;


    public ActaDao(DaoConfig config) {
        super(config);
    }
    
    public ActaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Acta' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'OBSERVACION' TEXT," + // 1: observacion
                "'CAUSA_RETIRO' TEXT," + // 2: causaRetiro
                "'EXIST_IMAGE' INTEGER," + // 3: existImage
                "'EXIST_VIDEO' INTEGER," + // 4: existVideo
                "'FECHA_CREACION' INTEGER," + // 5: fechaCreacion
                "'FECHA_FIRMA' INTEGER," + // 6: fechaFirma
                "'ID_SOLICITUD' INTEGER," + // 7: idSolicitud
                "'ID_OT' INTEGER," + // 8: idOt
                "'ID_GRUA' INTEGER," + // 9: idGrua
                "'FISCALIA' INTEGER," + // 10: fiscalia
                "'NUE' TEXT," + // 11: nue
                "'RUC' TEXT," + // 12: ruc
                "'PARTE' TEXT," + // 13: parte
                "'UNIDAD_POLICIAL' TEXT," + // 14: unidadPolicial
                "'FECHA_PARTE' INTEGER," + // 15: fechaParte
                "'SERVICIO' INTEGER," + // 16: servicio
                "'GRUA_EXTERNA' INTEGER," + // 17: gruaExterna
                "'OBSERVACION_IMGENES' TEXT," + // 18: observacionImgenes
                "'NOMBRE_EXTERNO' TEXT," + // 19: nombreExterno
                "'NUMERO_FACTURA' INTEGER," + // 20: numeroFactura
                "'MONTO_FACTURA' INTEGER," + // 21: montoFactura
                "'NUMERO_PATENTE' TEXT," + // 22: numeroPatente
                "'CARGA_INICIAL' INTEGER," + // 23: cargaInicial
                "'ACTA_INCAUTACION' TEXT," + // 24: actaIncautacion
                "'OFICIO_REMISOR' TEXT," + // 25: oficioRemisor
                "'VEHICULO_DATA_ID' INTEGER NOT NULL ," + // 26: vehiculoDataID
                "'DIRECCION_ID' INTEGER NOT NULL ," + // 27: direccionID
                "'AUTORIDAD_ID' INTEGER NOT NULL ," + // 28: autoridadID
                "'GRUERO_ID' INTEGER NOT NULL ," + // 29: grueroID
                "'TRIBUNAL_ID' INTEGER NOT NULL ," + // 30: grueroID
                "'TAREA_ID' INTEGER NOT NULL ," +  // 31: tribunalID
                "'FIRMA_ID' INTEGER );"); // 31: tribunalID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Acta'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Acta entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String observacion = entity.getObservacion();
        if (observacion != null) {
            stmt.bindString(2, observacion);
        }
 
        String causaRetiro = entity.getCausaRetiro();
        if (causaRetiro != null) {
            stmt.bindString(3, causaRetiro);
        }
 
        Boolean existImage = entity.getExistImage();
        if (existImage != null) {
            stmt.bindLong(4, existImage ? 1l: 0l);
        }
 
        Boolean existVideo = entity.getExistVideo();
        if (existVideo != null) {
            stmt.bindLong(5, existVideo ? 1l: 0l);
        }
 
        java.util.Date fechaCreacion = entity.getFechaCreacion();
        if (fechaCreacion != null) {
            stmt.bindLong(6, fechaCreacion.getTime());
        }
 
        java.util.Date fechaFirma = entity.getFechaFirma();
        if (fechaFirma != null) {
            stmt.bindLong(7, fechaFirma.getTime());
        }
 
        Integer idSolicitud = entity.getIdSolicitud();
        if (idSolicitud != null) {
            stmt.bindLong(8, idSolicitud);
        }
 
        Integer idOt = entity.getIdOt();
        if (idOt != null) {
            stmt.bindLong(9, idOt);
        }
 
        Integer idGrua = entity.getIdGrua();
        if (idGrua != null) {
            stmt.bindLong(10, idGrua);
        }
 
        Boolean fiscalia = entity.getFiscalia();
        if (fiscalia != null) {
            stmt.bindLong(11, fiscalia ? 1l: 0l);
        }
 
        String nue = entity.getNue();
        if (nue != null) {
            stmt.bindString(12, nue);
        }
 
        String ruc = entity.getRuc();
        if (ruc != null) {
            stmt.bindString(13, ruc);
        }
 
        String parte = entity.getParte();
        if (parte != null) {
            stmt.bindString(14, parte);
        }
 
        String unidadPolicial = entity.getUnidadPolicial();
        if (unidadPolicial != null) {
            stmt.bindString(15, unidadPolicial);
        }
 
        java.util.Date fechaParte = entity.getFechaParte();
        if (fechaParte != null) {
            stmt.bindLong(16, fechaParte.getTime());
        }
 
        Integer servicio = entity.getServicio();
        if (servicio != null) {
            stmt.bindLong(17, servicio);
        }
 
        Boolean gruaExterna = entity.getGruaExterna();
        if (gruaExterna != null) {
            stmt.bindLong(18, gruaExterna ? 1l: 0l);
        }
 
        String observacionImgenes = entity.getObservacionImgenes();
        if (observacionImgenes != null) {
            stmt.bindString(19, observacionImgenes);
        }
 
        String nombreExterno = entity.getNombreExterno();
        if (nombreExterno != null) {
            stmt.bindString(20, nombreExterno);
        }
 
        Integer numeroFactura = entity.getNumeroFactura();
        if (numeroFactura != null) {
            stmt.bindLong(21, numeroFactura);
        }
 
        Integer montoFactura = entity.getMontoFactura();
        if (montoFactura != null) {
            stmt.bindLong(22, montoFactura);
        }
 
        String numeroPatente = entity.getNumeroPatente();
        if (numeroPatente != null) {
            stmt.bindString(23, numeroPatente);
        }
 
        Boolean cargaInicial = entity.getCargaInicial();
        if (cargaInicial != null) {
            stmt.bindLong(24, cargaInicial ? 1l: 0l);
        }
 
        String actaIncautacion = entity.getActaIncautacion();
        if (actaIncautacion != null) {
            stmt.bindString(25, actaIncautacion);
        }
 
        String oficioRemisor = entity.getOficioRemisor();
        if (oficioRemisor != null) {
            stmt.bindString(26, oficioRemisor);
        }
        stmt.bindLong(27, entity.getVehiculoDataID());
        stmt.bindLong(28, entity.getDireccionID());
        stmt.bindLong(29, entity.getAutoridadID());
        stmt.bindLong(30, entity.getGrueroID());
        stmt.bindLong(31, entity.getTribunalID());
        stmt.bindLong(32, entity.getTareaId());
        stmt.bindLong(33, entity.getFirmaID());
    }

    @Override
    protected void attachEntity(Acta entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Acta readEntity(Cursor cursor, int offset) {
        System.out.println("readEntity_1");
        Acta entity = new Acta( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 31), // tareaID
            //cursor.getLong(offset + 1), // tribunalID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // observacion
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // causaRetiro
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // existImage
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // existVideo
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // fechaCreacion
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // fechaFirma
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // idSolicitud
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // idOt
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // idGrua
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // fiscalia
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // nue
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ruc
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // parte
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // unidadPolicial
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)), // fechaParte
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // servicio
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // gruaExterna
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // observacionImgenes
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // nombreExterno
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // numeroFactura
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // montoFactura
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // numeroPatente
            cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0, // cargaInicial
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // actaIncautacion
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // oficioRemisor
            cursor.getLong(offset + 26), // vehiculoDataID
            cursor.getLong(offset + 27), // direccionID
            cursor.getLong(offset + 28), // autoridadID
            cursor.getLong(offset + 29), // grueroID
            cursor.getLong(offset + 30), // tribunalID
            cursor.getLong(offset + 32) // tribunalID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Acta entity, int offset) {
        System.out.println("readEntity_2");
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTareaId(cursor.getLong(offset + 31));
        entity.setObservacion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCausaRetiro(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExistImage(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setExistVideo(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setFechaCreacion(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setFechaFirma(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setIdSolicitud(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIdOt(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIdGrua(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setFiscalia(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setNue(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRuc(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setParte(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUnidadPolicial(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFechaParte(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
        entity.setServicio(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setGruaExterna(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setObservacionImgenes(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setNombreExterno(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setNumeroFactura(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setMontoFactura(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setNumeroPatente(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCargaInicial(cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0);
        entity.setActaIncautacion(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setOficioRemisor(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setVehiculoDataID(cursor.getLong(offset + 26));
        entity.setDireccionID(cursor.getLong(offset + 27));
        entity.setAutoridadID(cursor.getLong(offset + 28));
        entity.setGrueroID(cursor.getLong(offset + 29));
        entity.setTribunalID(cursor.getLong(offset + 30));
        entity.setFirmaID(cursor.getLong(offset + 32));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Acta entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Acta entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTareaDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getVehiculoDataDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getDireccionDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getAutoridadDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getPersonaDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T5", daoSession.getInstitucionDao().getAllColumns());
            builder.append(" FROM Acta T");
            builder.append(" LEFT JOIN TAREA T0 ON T.'TAREA_ID'=T0.'_id'");
            builder.append(" LEFT JOIN vehiculoData T1 ON T.'VEHICULO_DATA_ID'=T1.'_id'");
            builder.append(" LEFT JOIN direccion T2 ON T.'DIRECCION_ID'=T2.'_id'");
            builder.append(" LEFT JOIN autoridad T3 ON T.'AUTORIDAD_ID'=T3.'_id'");
            builder.append(" LEFT JOIN persona T4 ON T.'GRUERO_ID'=T4.'_id'");
            builder.append(" LEFT JOIN institucion T5 ON T.'TRIBUNAL_ID'=T5.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Acta loadCurrentDeep(Cursor cursor, boolean lock) {
        Acta entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Tarea tarea = loadCurrentOther(daoSession.getTareaDao(), cursor, offset);
        if(tarea != null) {
            entity.setTarea(tarea);
        }

        VehiculoData vehiculoData = loadCurrentOther(daoSession.getVehiculoDataDao(), cursor, offset);
         if(vehiculoData != null) {
            entity.setVehiculoData(vehiculoData);
        }
        offset += daoSession.getVehiculoDataDao().getAllColumns().length;

        Direccion direccion = loadCurrentOther(daoSession.getDireccionDao(), cursor, offset);
         if(direccion != null) {
            entity.setDireccion(direccion);
        }
        offset += daoSession.getDireccionDao().getAllColumns().length;

        Autoridad autoridad = loadCurrentOther(daoSession.getAutoridadDao(), cursor, offset);
         if(autoridad != null) {
            entity.setAutoridad(autoridad);
        }
        offset += daoSession.getAutoridadDao().getAllColumns().length;

        Persona persona = loadCurrentOther(daoSession.getPersonaDao(), cursor, offset);
         if(persona != null) {
            entity.setPersona(persona);
        }
        offset += daoSession.getPersonaDao().getAllColumns().length;

        Institucion institucion = loadCurrentOther(daoSession.getInstitucionDao(), cursor, offset);
         if(institucion != null) {
            entity.setInstitucion(institucion);
        }

        return entity;    
    }

    public Acta loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Acta> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Acta> list = new ArrayList<Acta>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Acta> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Acta> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

    public Acta getByIdTarea(Long idTarea){
        Acta acta= queryBuilder()
                .where(Properties.TareaId.eq(idTarea))
                .unique();
        refresh(acta);
        //System.out.println("ActaDao: idActa="+acta.getId()+" Telefonos="+acta.getAutoridad().getPersona().getTelefonos().isEmpty());
        return acta;
    }
 
}
