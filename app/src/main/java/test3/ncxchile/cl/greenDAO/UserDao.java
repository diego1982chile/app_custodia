package test3.ncxchile.cl.greenDAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import test3.ncxchile.cl.greenDAO.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Rut = new Property(1, int.class, "rut", false, "RUT");
        public final static Property Dv = new Property(2, String.class, "dv", false, "DV");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property Nombre = new Property(4, String.class, "nombre", false, "NOMBRE");
        public final static Property ApellidoPaterno = new Property(5, String.class, "apellidoPaterno", false, "APELLIDO_PATERNO");
        public final static Property ApellidoMaterno = new Property(6, String.class, "apellidoMaterno", false, "APELLIDO_MATERNO");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'RUT' INTEGER NOT NULL ," + // 1: rut
                "'DV' TEXT NOT NULL ," + // 2: dv
                "'PASSWORD' TEXT," + // 3: password
                "'NOMBRE' TEXT," + // 4: nombre
                "'APELLIDO_PATERNO' TEXT," + // 5: apellidoPaterno
                "'APELLIDO_MATERNO' TEXT);"); // 6: apellidoMaterno
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRut());
        stmt.bindString(3, entity.getDv());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(5, nombre);
        }
 
        String apellidoPaterno = entity.getApellidoPaterno();
        if (apellidoPaterno != null) {
            stmt.bindString(6, apellidoPaterno);
        }
 
        String apellidoMaterno = entity.getApellidoMaterno();
        if (apellidoMaterno != null) {
            stmt.bindString(7, apellidoMaterno);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // rut
            cursor.getString(offset + 2), // dv
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nombre
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // apellidoPaterno
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // apellidoMaterno
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRut(cursor.getInt(offset + 1));
        entity.setDv(cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNombre(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setApellidoPaterno(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setApellidoMaterno(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    public List getByRut(int rut){
        List usuarios= queryBuilder()
        .where(Properties.Rut.eq(rut))
        .list();
        return usuarios;
    }

    public List getAll(){
        List usuarios= queryBuilder()
                .list();
        return usuarios;
    }
}
