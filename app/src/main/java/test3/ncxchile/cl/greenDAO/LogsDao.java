package test3.ncxchile.cl.greenDAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOGS.
*/
public class LogsDao extends AbstractDao<Logs, Long> {

    public static final String TABLENAME = "LOGS";

    /**
     * Properties of entity Logs.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TimeStamp = new Property(1, java.util.Date.class, "timeStamp", false, "TIME_STAMP");
        public final static Property Longitud = new Property(2, Float.class, "longitud", false, "LONGITUD");
        public final static Property Latitud = new Property(3, Float.class, "latitud", false, "LATITUD");
        public final static Property Descripcion = new Property(4, String.class, "Descripcion", false, "DESCRIPCION");
    };


    public LogsDao(DaoConfig config) {
        super(config);
    }
    
    public LogsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOGS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TIME_STAMP' INTEGER," + // 1: timeStamp
                "'LONGITUD' REAL," + // 2: longitud
                "'LATITUD' REAL," + // 3: latitud
                "'DESCRIPCION' TEXT);"); // 4: Descripcion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOGS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Logs entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(2, timeStamp.getTime());
        }
 
        Float longitud = entity.getLongitud();
        if (longitud != null) {
            stmt.bindDouble(3, longitud);
        }
 
        Float latitud = entity.getLatitud();
        if (latitud != null) {
            stmt.bindDouble(4, latitud);
        }
 
        String Descripcion = entity.getDescripcion();
        if (Descripcion != null) {
            stmt.bindString(5, Descripcion);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Logs readEntity(Cursor cursor, int offset) {
        Logs entity = new Logs( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // timeStamp
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // longitud
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // latitud
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // Descripcion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Logs entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimeStamp(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setLongitud(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setLatitud(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setDescripcion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Logs entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Logs entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
