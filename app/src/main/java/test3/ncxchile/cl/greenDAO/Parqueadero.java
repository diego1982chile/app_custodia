package test3.ncxchile.cl.greenDAO;

import java.util.List;
import test3.ncxchile.cl.greenDAO.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table parqueadero.
 */
public class Parqueadero {

    private Long id;
    private Integer numero;
    private String sector;
    private Integer servicio;
    private String recinto;
    private Boolean disponible;
    private Integer numeroEnAgrupador;
    private long agrupadorID;
    private long agrupadoPorID;
    private long fusionadoConID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ParqueaderoDao myDao;

    private Agrupador agrupador;
    private Long agrupador__resolvedKey;

    private ParqueaderoSummary agrupadoPor;
    private Long agrupadoPor__resolvedKey;

    private List<ParqueaderoSummary> fusionadoCon;

    public Parqueadero() {
    }

    public Parqueadero(Long id) {
        this.id = id;
    }

    public Parqueadero(Long id, Integer numero, String sector, Integer servicio, String recinto, Boolean disponible, Integer numeroEnAgrupador, long agrupadorID, long agrupadoPorID, long fusionadoConID) {
        this.id = id;
        this.numero = numero;
        this.sector = sector;
        this.servicio = servicio;
        this.recinto = recinto;
        this.disponible = disponible;
        this.numeroEnAgrupador = numeroEnAgrupador;
        this.agrupadorID = agrupadorID;
        this.agrupadoPorID = agrupadoPorID;
        this.fusionadoConID = fusionadoConID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getParqueaderoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getNumero() {
        return numero;
    }

    public void setNumero(Integer numero) {
        this.numero = numero;
    }

    public String getSector() {
        return sector;
    }

    public void setSector(String sector) {
        this.sector = sector;
    }

    public Integer getServicio() {
        return servicio;
    }

    public void setServicio(Integer servicio) {
        this.servicio = servicio;
    }

    public String getRecinto() {
        return recinto;
    }

    public void setRecinto(String recinto) {
        this.recinto = recinto;
    }

    public Boolean getDisponible() {
        return disponible;
    }

    public void setDisponible(Boolean disponible) {
        this.disponible = disponible;
    }

    public Integer getNumeroEnAgrupador() {
        return numeroEnAgrupador;
    }

    public void setNumeroEnAgrupador(Integer numeroEnAgrupador) {
        this.numeroEnAgrupador = numeroEnAgrupador;
    }

    public long getAgrupadorID() {
        return agrupadorID;
    }

    public void setAgrupadorID(long agrupadorID) {
        this.agrupadorID = agrupadorID;
    }

    public long getAgrupadoPorID() {
        return agrupadoPorID;
    }

    public void setAgrupadoPorID(long agrupadoPorID) {
        this.agrupadoPorID = agrupadoPorID;
    }

    public long getFusionadoConID() {
        return fusionadoConID;
    }

    public void setFusionadoConID(long fusionadoConID) {
        this.fusionadoConID = fusionadoConID;
    }

    /** To-one relationship, resolved on first access. */
    public Agrupador getAgrupador() {
        long __key = this.agrupadorID;
        if (agrupador__resolvedKey == null || !agrupador__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AgrupadorDao targetDao = daoSession.getAgrupadorDao();
            Agrupador agrupadorNew = targetDao.load(__key);
            synchronized (this) {
                agrupador = agrupadorNew;
            	agrupador__resolvedKey = __key;
            }
        }
        return agrupador;
    }

    public void setAgrupador(Agrupador agrupador) {
        if (agrupador == null) {
            throw new DaoException("To-one property 'agrupadorID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.agrupador = agrupador;
            agrupadorID = agrupador.getId();
            agrupador__resolvedKey = agrupadorID;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ParqueaderoSummary getAgrupadoPor() {
        long __key = this.agrupadoPorID;
        if (agrupadoPor__resolvedKey == null || !agrupadoPor__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ParqueaderoSummaryDao targetDao = daoSession.getParqueaderoSummaryDao();
            ParqueaderoSummary agrupadoPorNew = targetDao.load(__key);
            synchronized (this) {
                agrupadoPor = agrupadoPorNew;
            	agrupadoPor__resolvedKey = __key;
            }
        }
        return agrupadoPor;
    }

    public void setAgrupadoPor(ParqueaderoSummary agrupadoPor) {
        if (agrupadoPor == null) {
            throw new DaoException("To-one property 'agrupadoPorID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.agrupadoPor = agrupadoPor;
            agrupadoPorID = agrupadoPor.getId();
            agrupadoPor__resolvedKey = agrupadoPorID;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ParqueaderoSummary> getFusionadoCon() {
        if (fusionadoCon == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ParqueaderoSummaryDao targetDao = daoSession.getParqueaderoSummaryDao();
            List<ParqueaderoSummary> fusionadoConNew = targetDao._queryParqueadero_FusionadoCon(id);
            synchronized (this) {
                if(fusionadoCon == null) {
                    fusionadoCon = fusionadoConNew;
                }
            }
        }
        return fusionadoCon;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFusionadoCon() {
        fusionadoCon = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
